module mockup {
    internal_data:	    MOCKUP_STR;
    number:		    2000;
    email:                  "sylvain.joyeux@laas.fr";
    version:                "0.1";
}; 

/*------------------------------------------------------------------------
 *	                   Structures et SDI
 *------------------------------------------------------------------------*/

#include "mockupStruct.h"

typedef struct MOCKUP_STR {
    int index;
    int update_period;
    int error;
} MOCKUP_STR;

/*------------------------------------------------------------------------
 *	                       Requetes
 *------------------------------------------------------------------------*/

request SetIndex {
    type: control;
    input: new_value::index;
    doc: "Sets the value of index";
};

request GetIndex {
    type: control;
    output: value::index;
    doc: "Gets the value of index";
};

request SetPeriod {
    type: control;
    input: value::update_period;
    doc: "Sets the value of the update period";
};

request GetPeriod {
    type: control;
    output: value::update_period;
    doc: "Gets the value of the update period";
};

request UpdatePeriod {
    type: control;
    output: value::update_period;
    doc: "Check behaviour for output requests not beginning with Get";
};

request ChangeUpdatePeriod {
    type: control;
    input: value::update_period;
    doc: "Check behaviour for input requests not beginning with Set";
};

request Start {
    type: exec;
    doc: "Start counting";
    exec_task: VoidTask;
    c_exec_func: do_count;
};

request Failure {
    type: exec;
    doc: "Returns a failure report according to the number given as input";
    input: error::error;
    exec_task: VoidTask;
    fail_msg: FIRST_ERROR, SECOND_ERROR;
    c_exec_func: return_failure;
};


/*  */

/*------------------------------------------------------------------------
 *	                        Posters
 *------------------------------------------------------------------------*/
poster Index {
    update: auto;
    data:   value::index, 
            update_period::update_period;
    exec_task: VoidTask;
};


/*------------------------------------------------------------------------
 *	                   Taches d'Execution
 *------------------------------------------------------------------------*/


/*  */
exec_task VoidTask {
    period:		    none;
    delay:		    0;
    priority:		    10000;
    stack_size:		    1000;
    c_init_func:	    mockupVoidTaskInit;
};

