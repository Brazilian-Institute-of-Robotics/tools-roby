#! /usr/bin/env ruby

require 'roby'
require 'roby/log'
require 'roby/log/server'

require 'Qt'
require 'roby/log/event_stream'
require 'roby/log/plan_rebuilder'
require 'roby/log/relations_view/relations_view'

mode = :file
host = nil
port = Roby::Log::Server::DEFAULT_PORT
sampling_period = Roby::Log::Server::DEFAULT_SAMPLING_PERIOD / 2

options = OptionParser.new do |opt|
    opt.on('--client[=HOST[:PORT]]', String, "specifies a live roby controller to connect to. If the host is omitted, uses localhost. If the port is omitted, the default of #{Roby::Log::Server::DEFAULT_PORT} is used") do |host|
        mode = :client
        if !host
            host = 'localhost'
        end
        host, port = host.split(':')
        if host.empty?
            host = 'localhost'
        end
        port = Integer(port || Roby::Log::Server::DEFAULT_PORT)
    end
    opt.on('--server[=PORT]', Integer, "starts in server mode. If the port number is omitted, the default of #{Roby::Log::Server::DEFAULT_PORT} is used") do |server_port|
        mode = :server
        port = Integer(port || Roby::Log::Server::DEFAULT_PORT)
    end
    opt.on('--sampling=PERIOD', Float, "in server mode, specifies the sampling period in seconds (defaults to #{Roby::Log::Server::DEFAULT_SAMPLING_PERIOD / 2})") do |period|
        sampling_period = period
    end
    opt.on('--debug', 'turn on debugging messages') do
        Roby::Log::Server.logger.level = Logger::DEBUG
        Roby::Log.logger.level = Logger::DEBUG
    end
end

filename = options.parse(ARGV).shift
if mode == :client && filename
    STDERR.puts "INFO: no filename is needed when using the client mode"
elsif mode == :server && !filename
    STDERR.puts "ERROR: no filename given in server mode"
    exit(1)
elsif mode == :file && !filename
    STDERR.puts "ERROR: no filename given"
    exit(1)
end

if mode == :server
    server = Roby::Log::Server.new(filename, sampling_period, port)
    server.exec
    exit(0)
end

DRb.start_service "druby://localhost:0"

app = Qt::Application.new(ARGV)

display = Roby::LogReplay::RelationsDisplay::RelationsView.new
if File.file?('roby-display.yml')
    display.options(YAML.load(File.read('roby-display.yml')))
end

if mode == :file
    display.open(filename)
elsif mode == :client
    client = Roby::Log::Client.new(host, port)
    display.connect(client)
end
display.show

app.exec

File.open('roby-display.yml', 'w') do |io|
    YAML.dump(display.options, io)
end

