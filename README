


=== Known problems
== Synchronous propagation of events
The events may need synchronous propagation. For example, for the task model
    class EmptyTask < Roby::Task
        event :start, :command => true
        event :stop, :terminal => true
        on :start => :stop
    end

<tt>EmptyTask.new.emit(:start)</tt> will start and stop the task synchronously (both events
are emitted at the exact same time). Since some event ordering is 
checked by the engine, it may lead to some improper exceptions.

For instance, the following setup may raise +TaskModelException+ because :stop is emitted on
t1 before :start is
  class Forwarder
    def initialize(child)
      child.on(:start) { |event| emit(:start, event.context) }
      child.on(:stop, self, :stop)
    end
    def start; child.start!  end
  end
  child = Empty.new
  parent = Forwarder.new(child)
  parent.emit(:start)

The appropriate fix would be to consider that all events are emitted
at the same time, so that <tt>t(t1) <= t(t2)</tt>

For now, the only ordering is that instance-specific event handlers are called
before model-level ones. In the previous example, it means that the event handler
defined by 
        on :start => :stop
is called *after* the event handlers defined in Forwarder#initialize, thus guaranteeing
the good behaviour

This is a hack, but it is enough for now

