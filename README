=== Graph structures
Event structures are declared in Roby::EventStructure, and task structures are declared
in Roby::TaskStructure

See Roby::RelationSpace and Roby::DirectedRelation

=== Events
The event structure is described by a graph of EventGenerator objects. The actual events
are produced by the #new method on generators, and are subclasses of Event.

Example of event generators:
  * TaskEventGenerator for event generated by tasks
  * AndGenerator, OrGenerator, which aggregates a list of events
  * EverGenerator which implements the 'ever' semantic in event generator
  * UnhandledGenerator which implements the 'unhandled' semantic in event generator

== Event propagation

See Roby::EventGenerator and Roby::Event

=== Tasks
== Event models
== Inheritance semantics
  * a task subclass has all events of its parent class
  * some event attributes can be overriden. The rules are:
    - a non controlable event can become a controlable one, but not the other way around
    - a non-terminal event can become a terminal one, but not the other way around

See Roby::Task

=== Planning
The planning is in spirit similar to HTN planning: methods are used to develop 
a task tree. Where methods produce Task objects, an can call submethods. See Planning::method
for the method definitions.

== Inheritance semantics
  * added method models, for now one model for each inheritance level. Maybe go
    back at using one model for everybody
  * a subclass can overload a specific method by setting :id explicitely
  * the :returns option can be overriden as follows:
    - the :returns of a method should be a subclass of the :returns of its model
      and of the overloaded methods (methods in the inheritance hierarchy with the
      same id)
    - you cannot overload a method model, because it would lead to inconsistencies:
      if a method in the parent planner is defined w.r.t. the parent method model,
      then this method could be inconsistent with the method model defined in the 
      submodel
  * a model is frozen as soon as a method is defined based on it

See Roby::Planning and Roby::Plan

=== Genom adaptor

See Roby::Genom

