require 'roby/support'

module Roby
    module Display
        class Graph
            attr_reader :canvas
            def initialize(canvas)
                @canvas = canvas
                @nodes = Hash.new
                yield(self) if block_given?
            end

            def node(task)
                return @nodes[task] if @nodes[task]

                events = task.bound_events

                height = 12
                ev_radius = (height - 2) / 2
                width = if events.size < 2
                            height * 5
                        else
                            height * (events.size - 1)
                        end
                width = height * 5 unless width > height * 5

                @nodes[task] = canvas.g do |node|
                    node.styles(:stroke=>'black', :stroke_width=>1, :fill => 'white')

                    left_x = -width / 2
                    node.rect(width, height * 2, left_x, -height).
                        styles :stroke_width => 1
                    node.text(0, -height, task.model.name).
                        styles :text_anchor => 'middle', :font_size => height, :font_weight => 'lighter'

                    ev_spacing = width / (events.size - 1)
                    events.each_with_index do |ev, idx|
                        spot = node.circle(ev_radius, left_x + idx * ev_spacing, 0).
                            styles :stroke => 'black'
                        spot.styles :stroke => 'red' if ev.terminal?
                    end
                end
            end

            # Display task and all the subgraphs generated by the methods
            # in task_relatives
            #
            # In addition, we display the events defined by task and 
            # the signals which come from these events
            def display_hierarchy(task)
                root = node(task)

                task_relatives.each do |task_iter|
                    task.enum_bfs(task_iter) do |child, parent|
                        parent_node = node(parent)
                        child_node  = node(child)

                        hierarchy(parent_node, child_node)
                    end
                end
            end

            # Add a hierarchy link between parent and child
            def hierarchy(parent, child)
            end

            # Add a signal between parent and child
            def signal(parent, child)
            end
        end
    end
end

if $0 == __FILE__
    class EventMockup
        attr_reader :name
        def initialize(name, terminal = false); @name, @terminal = name, terminal end
        def terminal?; @terminal end
    end
    class TaskMockup
        def bound_events 
            [ EventMockup.new(:start, false), EventMockup.new(:stop, true) ]
        end
        def model
            m = Struct.new(:name).new
            m.name = "Bla::Blo"
            m
        end

    end

    def fill_canvas(canvas)
        canvas.background_fill = 'white'
        Roby::Display::Graph.new(canvas) do |graph|
            graph.node(TaskMockup.new).translate(128, 128)
        end
    end

    if true
        require 'RMagick'
        require 'rvg/rvg'

        include Magick
        RVG::dpi = 100
        canvas = RVG.new(512, 256)
        fill_canvas(canvas)
    end

    if false
        canvas.draw.display
    else
        canvas.draw.write('plan.png')

        require 'Qt'
        require 'rvg-qt'
        include Qt
        a = Application.new( ARGV )

        canvas = Canvas.new(512, 256)
        fill_canvas(canvas)

        view   = CanvasView.new(canvas)
        a.setMainWidget( view )
        view.show()
        canvas.update()
        view.update()
        a.exec()
    end
end

